--
-- demo.ott - playing with opetopic type theory
--

module Demo where {

  Arrow (X : Cat) (x : |X|) (y : |X|) : U
    =  Cell X [ box y (nd (dot x) lf) ] ;

  Drop (X : Cat) (x : |X|) (f : Arrow X x x) : U
    =  Cell X [ dot x | box f lf ] ;

  TwoGlob (X : Cat) (x : |X|) (y : |X|)
  	  (f : Arrow X x y) (g : Arrow X x y) : U
    = Cell X [ box y (nd (dot x) lf)
             | box g (nd (dot f) (nd lf lf))
  	     ] ;

  Simplex (X : Cat) (x : |X|) (y : |X|) (z : |X|)
  	  (f : Arrow X x y) (g : Arrow X y z) (h : Arrow X x z) : U
    = Cell X [ box z (nd (box y (nd (dot x) lf)) lf)
             | box h (nd (dot g) (nd (nd (dot f) (nd lf lf)) lf))
  	     ] ;

  vcomp (X : Cat) (x : |X|) (y : |X|) (z : |X|)
        (f : Arrow X x y) (g : Arrow X y z)
	: Arrow X x z = comp (nd g (nd (nd f (nd lf lf)) lf)) ;
      
  unit-right (X : Cat) (x : |X|) (y : |X|) (f : Arrow X x y)
    : TwoGlob X x y f (vcomp X x x y (refl x) f)
    = comp (nd (fill (nd f (nd (nd (refl x) (nd lf lf)) lf)))
      	     (nd lf (nd (nd (nd (drop x) lf) (nd lf lf)) lf))) ;

}