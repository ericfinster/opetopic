--
-- demo.ott - playing with opetopic type theory
--

let identity : (X : Type) -> X -> X
             = \X. \x. x ; 

let catTest : Type
            = Cat ;

let obTest : (X : Cat) -> Type
           = \X. Ob X ;

let Arrow : (X : Cat) -> (x : Ob X) -> (y : Ob X) -> Type
          = \X. \x. \y. Cell X 1 (pt x) y ;  

let Simplex : (X : Cat) -> (x : Ob X) -> (y : Ob X) -> (z : Ob X) -> (f : Arrow X x y) -> (g : Arrow X y z) -> (h : Arrow X x z) -> Type
            = \X. \x. \y. \z. \f. \g. \h. Cell X 2 (nd g (pt (nd f (pt lf)))) h ;

tt