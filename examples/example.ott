-- 
--  example.ott - testing and examples
--

let id : (X : Type) -> X -> X
       = \X. \x. x ; 

let projOne : (X : Type) -> (P : X -> Type) -> (e : (x : X) * P x) -> X
    	    = \X. \P. \e. fst e ;

let projTwo : (X : Type) -> (P : X -> Type) -> (e : (x : X) * P x) -> P (fst e)
    	    =  \X. \P. \e. snd e ;

let objType : (X : Cat) -> Type
    	    = \X. Obj X ;

let Arrow : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> Type
    	  = \X. \x. \y. Cell X [ box y (nd (dot x) lf) ] ;

let Drop : (X : Cat) -> (x : Obj X) -> (l : Arrow X x x) -> Type
    	 = \X. \x. \l. Cell X [ dot x || box l lf ] ;

let Simplex : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (z : Obj X) -> 
    	      (f : Arrow X x y) -> (g : Arrow X y z) -> (h : Arrow X x z) -> Type 
    	    = \X. \x. \y. \z. \f. \g. \h. Cell X [ box z (nd (box y (nd (dot x) lf)) lf) || box h (nd (dot g) (nd (nd (dot f) (nd lf lf)) lf)) ] ;

let lextTest : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (f : Arrow X x y) -> Type
    	     = \X. \x. \y. \f. isLeftExt f ;

let rextTest : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (f : Arrow X x y) -> Type
    	     = \X. \x. \y. \f. isRightExt f {} ;

let rTest : (X : Cat) -> (x : Obj X) -> Arrow X x x
    	  = \X. \x. refl x ;

let dTest : (X : Cat) -> (x : Obj X) -> Drop X x (refl x)
    	  = \X. \x. drop x ;

let cTest : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (z : Obj X) -> 
    	    (f : Arrow X x y) -> (g : Arrow X y z) -> Arrow X x z
	  =  \X. \x. \y. \z. \f. \g. comp (nd g (nd (nd f (nd lf lf)) lf)) ;

let fTest : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (z : Obj X) -> 
    	    (f : Arrow X x y) -> (g : Arrow X y z) -> Simplex X x y z f g (cTest X x y z f g)
	  =  \X. \x. \y. \z. \f. \g. fill (nd g (nd (nd f (nd lf lf)) lf)) ;

tt
