--
-- homtest.ott - checking properties of hom categories
--

let Arrow : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> Type
    	  = \X. \x. \y. Cell X [ box y (pt (obj x)) ] 

let TwoGlob : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (f : Arrow X x y) -> (g : Arrow X x y) -> Type
    	    = \X. \x. \y. \f. \g. Cell X [ box y (pt (obj x)) ]>> [ box g (node (dot f) (pt leaf)) ] 

let homType : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> Cat
    	    = \X. \x. \y. Hom X [ box y (pt (obj x)) ]

let arrowTest : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (f : Arrow X x y) -> Obj (homType X x y)
    	      = \X. \x. \y. \f. f

let fred : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (f : Obj (homType X x y)) -> Arrow X x y
    	 = \X. \x. \y. \f. f

-- What should happen next?
-- We should try to do vertical composition

let comp : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (z : Obj X) -> (f : Arrow X x y) -> (g : Arrow X y z) -> Arrow X x z
    	 = \X. \x. \y. \z. \f. \g. comp X [ box z (pt (box y (pt (obj x)))) ]>> { node g (pt (node f (pt leaf))) } 

let vcomp : (X : Cat) -> (x : Obj X) -> (y : Obj X) -> (f : Arrow X x y) -> (g : Arrow X x y) -> (h : Arrow X x y) ->
    	    (a : TwoGlob X x y f g) -> (b : TwoGlob X x y g h) -> TwoGlob X x y f h
	  = \X. \x. \y. \f. \g. \h. \a. \b. comp (homType X x y) f g h a b

