--
-- assoc.ott - tests of associativity
--

let m2 : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
         (d : (p :> M i c) -> ConsOf M [p]) -> 
	 (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> ConsOf M i
       = \M. \i. \c. \d. \e. mu M i (mu M i c d) (<p, q> ((e @ p) @ q)) ;

let m3R : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
          (d : (p :> M i c) -> ConsOf M [p]) -> 
	  (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
	  (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> ConsOf M i
        = \M. \i. \c. \d. \e. \f. mu M i (m2 M i c d e) (<(p,q),r> (((f @ p) @ q) @ r)) ;

let m3L : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
          (d : (p :> M i c) -> ConsOf M [p]) -> 
	  (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
	  (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> ConsOf M i
        = \M. \i. \c. \d. \e. \f. mu M i c (<p> m2 M [p] (d @ p) (e @ p) (f @ p)) ;

let m3RE : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
           (d : (p :> M i c) -> ConsOf M [p]) -> 
	   (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
	   (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> ConsOf M i
         = \M. \i. \c. \d. \e. \f. mu M i (mu M i (mu M i c d) (<p, q> ((e @ p) @ q))) (<(p,q),r> (((f @ p) @ q) @ r)) ;

let m3LE : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) ->
           (d : (p :> M i c) -> ConsOf M [p]) -> 
	   (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
	   (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> ConsOf M i
	 = \M. \i. \c. \d. \e. \f. mu M i c (<p> (mu M [p] (mu M [p] (d @ p) (e @ p)) (<q,r> (((f @ p) @ q) @ r)))) ;

--
--  Here are the intro and eliminator for mu.  My goal is to write the two
--  above versions of triple multiplication in terms of eliminators.  Then
--  you will impose the required equation.
--

let me : (M : Mnd) -> (P : (IndexOf M) -> Type) ->
     	 (i : IndexOf M) -> (c : ConsOf M i) ->
    	 (d : (p :> M i c) -> ConsOf M [p]) -> 
	 (f : (p :> M i (mu M i c d)) -> P [p]) -> 
	 (p :> M i c) -> (q :> M [p] (d @ p)) -> P [q]
       = \M. \P. \i. \c. \d. \f. muE M P i c d f ;  

let mi : (M : Mnd) -> (P : (IndexOf M) -> Type) ->
         (i : IndexOf M) -> (c : ConsOf M i) ->
    	 (d : (p :> M i c) -> ConsOf M [p]) -> 
	 (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> P [q]) -> 
	 (p :> M i (mu M i c d)) -> P [p]
       = \M. \P. \i. \c. \d. \e. <p, q> ((e @ p) @ q) ;

--
--  Versions of the above specialized to construtors ...
--

let mic : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) ->
    	  (d : (p :> M i c) -> ConsOf M [p]) -> 
	  (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
	  (p :> M i (mu M i c d)) -> ConsOf M [p]
	= \M. \i. \c. \d. \e. muI M (ConsOf M) i c d e ;

let mec : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) ->
    	  (d : (p :> M i c) -> ConsOf M [p]) -> 
	  (f : (p :> M i (mu M i c d)) -> ConsOf M [p]) -> 
	  (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]
	= \M. \i. \c. \d. \f. muE M (ConsOf M) i c d f ;  

--
--  Now, let's get to it ..
--

let decfib : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> Type
           = \M. \i. \c. (p :> M i c) -> ConsOf M [p] ; 

-- let assocDL : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
--               (d : (p :> M i c) -> ConsOf M [p]) -> 
-- 	      (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
-- 	      (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> 
-- 	      (p :> M i (mu M i c d)) -> (q :> M [p] ((mic M i c d e) @ p)) -> ConsOf M [q]
-- 	   = \M. \i. \c. \d. \e. \f.  ;

-- Okay, interesting, this one seems to be definable with your abstraction 
-- mechanism.

-- Right, so here is the problem: the reason that mi itself is not general enough
-- is that just considering fibrations P : IndexOf M -> Type for introduction purposes
-- is not enough.  In general, these iterated dependecies behave like their own little
-- type system, and for mu, what we're finding is that we need sigma types in this system
-- and we don't have them.

-- We see this in the right version below, where I need to apply the elimination rule
-- for mu under a binder.  It's that the mu rules should sort of apply in all *contexts*
-- of places, and right now, we just have them at the top.

let assocDR : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
              (d : (p :> M i c) -> ConsOf M [p]) -> 
	      (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
	      (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> 
	      (p :> M i c) -> (q :> M [p] (mu M [p] (d @ p) (e @ p))) -> ConsOf M [q]
	   = \M. \i. \c. \d. \e. \f. <p> mic M [p] (d @ p) (e @ p) (f @ p) ;

-- let assocR : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
--              (d : (p :> M i c) -> ConsOf M [p]) -> 
-- 	     (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
-- 	     (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> 
-- 	     ConsOf M i
-- 	   = \M. \i. \c. \d. \e. \f. mu M i (mu M i (mu M i c d) (mic M i c d e)) (mic M i (mu M i c d) (mic M i c d e) tt) ;

-- let m3RE : (M : Mnd) -> (i : IndexOf M) -> (c : ConsOf M i) -> 
--            (d : (p :> M i c) -> ConsOf M [p]) -> 
-- 	   (e : (p :> M i c) -> (q :> M [p] (d @ p)) -> ConsOf M [q]) -> 
-- 	   (f : (p :> M i c) -> (q :> M [p] (d @ p)) -> (r :> M [q] ((e @ p) @ q)) -> ConsOf M [r]) -> ConsOf M i
--          = \M. \i. \c. \d. \e. \f. mu M i (mu M i (mu M i c d) (<p, q> ((e @ p) @ q))) (<(p,q),r> (((f @ p) @ q) @ r)) ;

tt